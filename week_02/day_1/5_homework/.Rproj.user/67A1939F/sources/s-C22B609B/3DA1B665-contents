---
title: "Joins and `tidyr` Homework"
output:
  html_document:
    toc: true
    toc_float: true
    number_sections: true
    df_print: paged
    css: ../../../styles.css
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

<br>

The data for the joining tasks is from [Kaggle](https://www.kaggle.com/ananta/credit-card-data) and contains synthetic (fake) credit card information and transactions. The data for the `tidyr` tasks is also synthetic.

# MVP

## Joins
```{r}
library(tidyverse)
```

<br>
**Question 1**

Read in all 4 credit card transaction datasets and clean column names.

```{r}
card_base <- read_csv("data/CardBase.csv")
cust_base <- read_csv("data/CustomerBase.csv")
fraud_base <- read_csv("data/FraudBase.csv")
trans_base <- read_csv("data/TransactionBase.csv")

names(card_base)[names(card_base) == "Card_Number"] <- "Credit_Card_ID"
```


**Question 2**

Join the data containing card details and customer details by customer id, so that all records of card details and any matching records in customer details are kept. Before you run the code, think about how many rows you expect to see after joining.



```{r}
inner_join(cust_base, card_base, by = "Cust_ID") %>%  view()
```

Inner join creates only rows for customers with credit cards ie rows in joined data matches card_base

**Question 3**

Join the data containing fraud details with transaction details so all rows of both tables are kept. What does the resulting row number tell you?

```{r}
left_join(trans_base, fraud_base, by = "Transaction_ID") %>%  view()

```
Joined data has same number of rows as trans_base (10000).
109/10000 transactions are flagged as fraudulent. Not very common.

**Question 4**

Join the data containing card details with transaction details so rows from the first which have matching ones in the second are returned, but only return rows in the first table once.

```{r}
full_join(card_base, trans_base, by = "Credit_Card_ID") %>% view()
#left_join(card_base, trans_base, by = "Credit_Card_ID") %>% 
```


## `tidyr`

**Question 5**

Read in `hat_observations` and separate `observation` into two columns, `hat_colour` and `hat_type`.

```{r}
hat_obs <- read_csv("data/hat_observations.csv")
hat_obs %>% 
    separate(
    col = observation,
    into = c("hat_colour", "hat_type"), 
    sep = ","
    )

```



**Question 6**

Unite `day`, `month`, and `year` columns into a column called `date` using a suitable separator. Then find the date where the most berets were observed.

```{r}
hat_obs %>% 
    separate(
    col = observation,
    into = c("hat_colour", "hat_type"), 
    sep = ","
    ) %>% 
  unite(
    col = "date",
    c(day, month, year),
    sep = "/"
  ) %>%  
  filter(hat_type == "beret") %>% 
arrange(desc(observation_count))
```
# 18/6/2018

# Extension

## Joins

**Question 1**

Can you join all 4 datasets together so that you're left with a dataset that looks like below with **109 rows** and **12 columns**?

![](images/all_joined.png)
```{r}
trans_fraud <- left_join(fraud_base, trans_base, by = "Transaction_ID") #%>% view()
card_fraud <- left_join(trans_fraud, card_base, by = "Credit_Card_ID") 
cust_fraud <- left_join(card_fraud, cust_base, by = "Cust_ID") 
cust_fraud_arr <- cust_fraud[, c(8, 12, 9, 1, 10, 11, 2, 3, 4, 5, 6, 7)]
cust_fraud_arr
cust_fraud
```

## `tidyr`

**Question 2**

Read in `exam_scores` and transform it into long format with two new columns `exam_question` and `score`. Then, using `separate` and `select`, remove superfluous information from the values in `exam_question`